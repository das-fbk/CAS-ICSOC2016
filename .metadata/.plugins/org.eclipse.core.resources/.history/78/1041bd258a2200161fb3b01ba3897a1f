package eu.fbk.das.adaptation;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.Random;

import javax.naming.ConfigurationException;
import javax.swing.UIManager;

import de.dfki.ek.EKConfiguration;
import de.dfki.ek.EvoKnowledge;
import de.dfki.ek.Experience;
import eu.fbk.das.adaptation.api.CollectiveAdaptationEnsemble;
import eu.fbk.das.adaptation.api.CollectiveAdaptationInterface;
import eu.fbk.das.adaptation.api.CollectiveAdaptationProblem;
import eu.fbk.das.adaptation.api.CollectiveAdaptationRole;
import eu.fbk.das.adaptation.api.CollectiveAdaptationSolution;
import eu.fbk.das.adaptation.api.RoleCommand;
import eu.fbk.das.adaptation.ensemble.Ensemble;
import eu.fbk.das.adaptation.ensemble.Issue;
import eu.fbk.das.adaptation.model.IssueCommunication;
import eu.fbk.das.adaptation.model.IssueResolution;
import eu.fbk.das.adaptation.presentation.CAWindow;

public class DemonstratorAnalyzer implements CollectiveAdaptationInterface {

    private final static String PROP_PATH = "adaptation.properties";

    // private final static String PreferencesDir =
    // "scenario/ALLOWEnsembles/Preferences/";

    @Override
    public CollectiveAdaptationSolution executeCap(
	    CollectiveAdaptationProblem cap) {
	// call the analyzer with the specific CAP

	// reading property file
	// String propPath = PROP_PATH;

	Properties props = new Properties();
	try {
	    props.load(getClass().getClassLoader().getResourceAsStream(
		    PROP_PATH));
	} catch (FileNotFoundException e) {
	    System.out.println("Error loading file " + e.getMessage());
	    return null;
	} catch (IOException e) {
	    System.out.println("Error loading file " + e.getMessage());
	    return null;
	}

	// ///// Evoknowledge SETUP/////////
	// String modelPath = "jdbc:postgresql://localhost:5432/";
	String modelPath = "jdbc:mysql://localhost:3306/";
	String modelName = "allowek";
	String userName = "root";
	String password = "";

	// Create EKConfiguration or read from file
	EKConfiguration config = new EKConfiguration(modelPath, modelName,
		userName, password);

	// Initialize EvoKnowledge
	EvoKnowledge.initialize(config, "ek", true);

	// Create a new instance of EvoKnowledge
	EvoKnowledge ek = EvoKnowledge.createEvoKnowledge();
	// ////////////////////////////
	/* CREATE THE LEARNING BASE - EXPERIENCE IN THE DB */
	List<Experience> experiences = new ArrayList<Experience>();

	List<String> issueTypes = new ArrayList<String>();
	issueTypes.add("TrafficDetected");
	issueTypes.add("AccidentDetected");
	issueTypes.add("FlexiBusBroken");
	issueTypes.add("StrikeWarning");
	issueTypes.add("FlexiBusDelay");
	issueTypes.add("RouteBlocked");

	List<String> solverTypes = new ArrayList<String>();
	solverTypes.add("DeleteRoute");
	solverTypes.add("UpdateRoute");
	solverTypes.add("AskHelpCarPool");
	solverTypes.add("ChangePathDropPP");
	solverTypes.add("ChangePathAddPP");
	solverTypes.add("AskHelpOtherRoute");

	HashMap<String, Integer> issueTypesMap = new HashMap<String, Integer>();

	issueTypesMap.put("TrafficDetected", 1);
	issueTypesMap.put("AccidentDetected", 2);
	issueTypesMap.put("FlexiBusBroken", 3);
	issueTypesMap.put("StrikeWarning", 4);
	issueTypesMap.put("FlexiBusDelay", 5);
	issueTypesMap.put("RouteBlocked", 6);

	HashMap<String, Integer> solverTypesMap = new HashMap<String, Integer>();

	solverTypesMap.put("DeleteRoute", 1);
	solverTypesMap.put("UpdateRoute", 2);
	solverTypesMap.put("AskHelpCarPool", 3);
	solverTypesMap.put("ChangePathDropPP", 4);
	solverTypesMap.put("ChangePathAddPP", 5);
	solverTypesMap.put("AskHelpOtherRoute", 6);

	// FILL THE DB CONTENT WITH RANDOM EXPERIENCES
	System.out.println("SIZE BEFORE: " + experiences.size());
	for (int i = 0; i < 5000; i++) {
	    experiences = AddExperience(experiences, issueTypes, solverTypes,
		    issueTypesMap, solverTypesMap);
	}
	System.out.println("SIZE AFTER: " + experiences.size());
	ek.learn(experiences);
	// ////////////////////////////
	/* END LEARNING BASE CREATED */

	// ///////////////////////

	// demo management system construction

	DemoManagementSystem dms = null;
	try {
	    dms = DemoManagementSystem
		    .initializeSystem("scenario/ALLOWEnsembles/Review/");
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	// creation of ensembles
	List<EnsembleManager> ensembles = new ArrayList<EnsembleManager>();
	for (int i = 0; i < cap.getEnsembles().size(); i++) {
	    CollectiveAdaptationEnsemble ensemble = cap.getEnsembles().get(i);
	    String EnsembleName = ensemble.getEnsembleName();
	    Ensemble e = dms.getEnsemble(EnsembleName);
	    EnsembleManager manager = new EnsembleManager(e);

	    // set the Evoknowledge of the Ensemble
	    manager.setEk(ek);

	    // add the ensemble to the list
	    ensembles.add(manager);

	}

	// run the Analyzer
	CAWindow window = new CAWindow(ensembles);
	CollectiveAdaptationSolution solution = this.run(cap, ensembles,
		window, cap.getIssue(), cap.getCapID(), "FlexibusDriver_22");

	return solution;

    }

    public CollectiveAdaptationSolution run(CollectiveAdaptationProblem cap,
	    List<EnsembleManager> ensembles, CAWindow window, String issueName,
	    String capID, String startingRole) {

	CollectiveAdaptationSolution solution = new CollectiveAdaptationSolution(
		capID, null);
	Issue issue = new Issue();
	issue.setIssueType(issueName);

	// search the role that can trigger the specific issue

	RoleManager r = ensembles.get(0).getRolebyType(startingRole);
	System.out.println("ISSUE TRIGGERED: " + issue.getIssueType());

	IssueResolution resolution1 = new IssueResolution(1, "ISSUE_TRIGGERED",
		r, r, issue, null);
	resolution1.setRoot(true);
	r.addIssueResolution(resolution1);

	EnsembleManager em = null;

	// add the issueresolution to the right Ensemble
	for (int i = 0; i < ensembles.size(); i++) {
	    for (int j = 0; j < ensembles.get(i).getRolesManagers().size(); j++) {
		RoleManager currentManager = ensembles.get(i)
			.getRolesManagers().get(j);
		if (currentManager.getRole().getType()
			.equalsIgnoreCase(r.getRole().getType())) {
		    ArrayList<IssueResolution> resolutions = new ArrayList<IssueResolution>();

		    em = ensembles.get(i);
		    if (em.getIssueCommunications() != null) {
			em.getIssueCommunications().clear();
		    }

		    solution.setCapID(capID);
		    HashMap<String, List<RoleCommand>> ensembleCommands = new HashMap<String, List<RoleCommand>>();
		    List<RoleCommand> commands = new ArrayList<RoleCommand>();
		    ensembleCommands.put(em.getEnsemble().getName(), commands);

		    solution.setEnsembleCommands(ensembleCommands);

		    // update id of the issue resolution
		    em.setIssueResolutionCount(1);
		    resolution1.setIssueResolutionID(em
			    .getIssueResolutionCount());

		    resolutions.add(resolution1);
		    em.setActiveIssueResolutions(resolutions);

		    List<IssueCommunication> relatedComs = new ArrayList<IssueCommunication>();

		    em.setCommunicationsRelations(resolution1, relatedComs);

		    em.checkIssues(cap, capID, window, ensembles, solution);

		    break;
		}
	    }
	}
	// retrieve the final solution for the ensemble
	List<RoleCommand> roleCommands = new ArrayList<RoleCommand>();
	solution.setCapID(capID);
	for (int i = 0; i < em.getRolesManagers().size(); i++) {
	    RoleManager rm = em.getRolesManagers().get(i);
	    // System.out.println("ROLE: " + rm.getRole().getType());
	    RoleCommand command = rm.getRoleCommands();
	    // System.out.println("COMMAND: " + command.getCommands().get(0));
	    roleCommands.add(command);

	}

	HashMap<String, List<RoleCommand>> ensembleCommands = new HashMap<String, List<RoleCommand>>();
	ensembleCommands.put(em.getEnsemble().getName(), roleCommands);
	solution.setEnsembleCommands(ensembleCommands);
	return solution;

    }

    public static void main(String[] args) throws ConfigurationException,
	    FileNotFoundException {

	try {
	    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	} catch (Exception e) {

	}

	System.gc();
	String propPath = PROP_PATH;
	if (args.length > 0) {
	    propPath = args[0];
	}

	// try {
	// System.out.println("Experiment starting in 5 seconds...");
	// Thread.sleep(5000);
	// } catch (InterruptedException e) {
	// e.printStackTrace();
	// }

	// ROUTE A

	List<CollectiveAdaptationRole> rolesRouteA = new ArrayList<CollectiveAdaptationRole>();

	CollectiveAdaptationRole p1 = new CollectiveAdaptationRole();
	p1.setRole("RoutePassenger_33");
	p1.setId(33);
	p1.setTravel_time(35);// inventato
	p1.setCost(10); // inventato
	p1.setWeightTravelTime(0.2);
	p1.setWeightCost(0.3);
	p1.setMaxTravelTime(40);
	p1.setMaxCost(10.0);

	CollectiveAdaptationRole p2 = new CollectiveAdaptationRole();
	p2.setRole("RoutePassenger_32");
	p2.setId(32);
	p2.setTravel_time(35); // inventato
	p2.setCost(10); // inventato
	p2.setWeightTravelTime(0.7);
	p2.setWeightCost(0.9);
	p2.setMaxTravelTime(40);
	p2.setMaxCost(10.0);

	CollectiveAdaptationRole p3 = new CollectiveAdaptationRole();
	p3.setRole("RoutePassenger_36");
	p3.setId(36);
	p3.setTravel_time(35); // inventato
	p3.setCost(10); // inventato
	p3.setWeightTravelTime(0.7);
	p3.setWeightCost(0.9);
	p3.setMaxTravelTime(40);
	p3.setMaxCost(100);

	rolesRouteA.add(p1);
	rolesRouteA.add(p2);
	rolesRouteA.add(p3);

	// ROUTE B
	List<CollectiveAdaptationRole> rolesRouteB = new ArrayList<CollectiveAdaptationRole>();
	CollectiveAdaptationRole p4 = new CollectiveAdaptationRole();
	p4.setRole("RoutePassenger_64");
	p4.setId(64);
	p4.setTravel_time(35);// inventato
	p4.setCost(10); // inventato
	p4.setWeightTravelTime(0.2);
	p4.setWeightCost(0.3);
	p4.setMaxTravelTime(40);
	p4.setMaxCost(10.0);

	CollectiveAdaptationRole p4Bis = new CollectiveAdaptationRole();
	p4Bis.setRole("RoutePassenger_68");
	p4Bis.setId(68);
	p4Bis.setTravel_time(35); // inventato
	p4Bis.setCost(10); // inventato
	p4Bis.setWeightTravelTime(0.7);
	p4Bis.setWeightCost(0.9);
	p4Bis.setMaxTravelTime(40);
	p4Bis.setMaxCost(10.0);

	CollectiveAdaptationRole p6 = new CollectiveAdaptationRole();
	p6.setRole("RoutePassenger_73");
	p6.setId(73);
	p6.setTravel_time(35); // inventato
	p6.setCost(10); // inventato
	p6.setWeightTravelTime(0.7);
	p6.setWeightCost(0.9);
	p6.setMaxTravelTime(40);
	p6.setMaxCost(100);

	rolesRouteB.add(p4);
	rolesRouteB.add(p4Bis);
	rolesRouteB.add(p6);

	DemonstratorAnalyzer demo = new DemonstratorAnalyzer();

	List<CollectiveAdaptationEnsemble> ensembles = new ArrayList<CollectiveAdaptationEnsemble>();
	ensembles.add(new CollectiveAdaptationEnsemble("RouteA", rolesRouteA));
	ensembles.add(new CollectiveAdaptationEnsemble("RouteB", rolesRouteB));

	// ensembles.add(new CollectiveAdaptationEnsemble("RouteB",
	// Arrays.asList("RoutePassenger_4",
	// "RoutePassenger_4bis", "RoutePassenger_5", "RoutePassenger_6",
	// "FlexibusDriver_2", "RouteManager_2")));

	// CollectiveAdaptationProblem cap = new
	// CollectiveAdaptationProblem("CAP_1", ensembles, "IntenseTraffic",
	// "FlexibusDriver_13");

	CollectiveAdaptationProblem cap = new CollectiveAdaptationProblem(
		"CAP_1", ensembles, "RouteBlocked", "FlexibusDriver_22");

	CollectiveAdaptationSolution cas = demo.executeCap(cap);

	System.out.println("SOLUTION ID: " + cas.getCapID());

	for (HashMap.Entry<String, List<RoleCommand>> entry : cas
		.getEnsembleCommands().entrySet()) {
	    System.out.println(entry.getKey() + " : " + entry.getValue());
	    List<RoleCommand> commands = entry.getValue();

	    for (int i = 0; i < commands.size(); i++) {
		if (commands.get(i) != null) {
		    RoleCommand current = commands.get(i);
		    System.out.println("ROLE: " + current.getRole());
		    System.out.println("COMMAND: "
			    + current.getCommands().get(0));
		}

	    }
	}

	System.out.println("END SIMULATION");
	// System.exit(1);

    }

    private static List<Experience> AddExperience(List<Experience> experiences,
	    List<String> issueTypes, List<String> solverTypes,
	    HashMap<String, Integer> issueTypesMap,
	    HashMap<String, Integer> solverTypesMap) {
	// select Issue Type Randomly
	int randomIssue = new Random().nextInt(issueTypes.size());
	String issueType = issueTypes.get(randomIssue);
	// System.out.println("Issue Type Seleceted: " + issueType);

	int randomSolver = 0;

	// solverTypesMap.put("DeleteRoute", 1);
	// solverTypesMap.put("UpdateRoute", 2);
	// solverTypesMap.put("AskHelpCarPool", 3);

	if (issueType.equals("TrafficDetected")) {
	    // Possible Solvers : AskHelpOtherRoute (6), ChangePathDropPP
	    // (4),ChangePathAddPP (5)
	    Random rand = new Random();
	    randomSolver = rand.nextInt((5 - 3) + 1) + 3;

	} else if (issueType.equals("AccidentDetected")) {
	    randomSolver = 1;

	} else if (issueType.equals("FlexiBusBroken")) {
	    randomSolver = 2;

	} else if (issueType.equals("StrikeWarning")) {
	    randomSolver = 0;

	} else if (issueTypes.equals("FlexiBusDelay")) {
	    randomSolver = 1;
	}

	String solverType = solverTypes.get(randomSolver);

	// select Solver Type Randomly
	// int randomSolver = new Random().nextInt(issueTypes.size());
	// String solverType = solverTypes.get(randomSolver);
	System.out.println("Solver Type Seleceted: " + solverType);

	int issueTypeSelected = issueTypesMap.get(issueType);
	int solverTypeSelected = solverTypesMap.get(solverType);

	Random rand1 = new Random();
	int numberOfPassengersWaiting = rand1.nextInt((5 - 1) + 1) + 1;

	Random rand2 = new Random();
	int numberOfPassengers = rand2.nextInt((5 - 1) + 1) + 1;

	Random r = new Random();
	double utilityFirst = 0.4 + (0.99 - 0.4) * r.nextDouble();

	String sValue = String.format("%.2f", utilityFirst);
	// System.out.println(sValue);
	String newValue = sValue.replace(',', '.');
	double utility = Double.parseDouble(newValue);
	// System.out.println("RANDOM UTILITY: " + utility);

	Experience experience = new Experience(issueTypeSelected,
		solverTypeSelected, numberOfPassengersWaiting,
		numberOfPassengers, utility);
	experiences.add(experience);
	return experiences;
    }

}
