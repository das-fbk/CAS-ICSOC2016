package eu.fbk.das.adaptation;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import javax.naming.ConfigurationException;
import javax.swing.UIManager;

import de.dfki.ek.EKConfiguration;
import de.dfki.ek.EvoKnowledge;
import eu.fbk.das.adaptation.api.CollectiveAdaptationEnsemble;
import eu.fbk.das.adaptation.api.CollectiveAdaptationInterface;
import eu.fbk.das.adaptation.api.CollectiveAdaptationProblem;
import eu.fbk.das.adaptation.api.CollectiveAdaptationSolution;
import eu.fbk.das.adaptation.api.RoleCommand;
import eu.fbk.das.adaptation.ensemble.Ensemble;
import eu.fbk.das.adaptation.ensemble.Issue;
import eu.fbk.das.adaptation.model.IssueCommunication;
import eu.fbk.das.adaptation.model.IssueResolution;
import eu.fbk.das.adaptation.presentation.CAWindow;

public class DemonstratorAnalyzer implements CollectiveAdaptationInterface {

    private final static String PROP_PATH = "adaptation.properties";

    private final static String PreferencesDir = "scenario/ALLOWEnsembles/Preferences/";

    @Override
    public CollectiveAdaptationSolution executeCap(
	    CollectiveAdaptationProblem cap) {
	// call the analyzer with the specific CAP

	// reading property file
	// String propPath = PROP_PATH;

	Properties props = new Properties();
	try {
	    props.load(getClass().getClassLoader().getResourceAsStream(
		    PROP_PATH));
	} catch (FileNotFoundException e) {
	    System.out.println("Error loading file " + e.getMessage());
	    return null;
	} catch (IOException e) {
	    System.out.println("Error loading file " + e.getMessage());
	    return null;
	}

	// ///// Evoknowledge SETUP/////////
	// String modelPath = "jdbc:postgresql://localhost:5432/";
	String modelPath = "jdbc:mysql://localhost:3306/";
	String modelName = "allowek";
	String userName = "root";
	String password = "";

	// Create EKConfiguration or read from file
	EKConfiguration config = new EKConfiguration(modelPath, modelName,
		userName, password);

	// Initialize EvoKnowledge
	EvoKnowledge.initialize(config, "ek");

	// Create a new instance of EvoKnowledge
	EvoKnowledge ek = EvoKnowledge.createEvoKnowledge();
	// ////////////////////////////

	// demo management system construction

	DemoManagementSystem dms = null;
	try {
	    dms = DemoManagementSystem
		    .initializeSystem("scenario/ALLOWEnsembles/Review/");
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	// creation of ensembles
	List<EnsembleManager> ensembles = new ArrayList<EnsembleManager>();
	for (int i = 0; i < cap.getEnsembles().size(); i++) {
	    CollectiveAdaptationEnsemble ensemble = cap.getEnsembles().get(i);
	    String EnsembleName = ensemble.getEnsembleName();
	    Ensemble e = dms.getEnsemble(EnsembleName);
	    EnsembleManager manager = new EnsembleManager(e);

	    // set the Evoknowledge of the Ensemble
	    manager.setEk(ek);
	    // add the ensemble to the list
	    ensembles.add(manager);

	}

	// run the Analyzer
	CAWindow window = new CAWindow(ensembles);
	CollectiveAdaptationSolution solution = this.run(ensembles, window,
		cap.getIssue(), cap.getCapID(), "FlexibusDriver_23");

	return solution;

    }

    public CollectiveAdaptationSolution run(List<EnsembleManager> ensembles,
	    CAWindow window, String issueName, String capID, String startingRole) {

	CollectiveAdaptationSolution solution = new CollectiveAdaptationSolution(
		capID, null);
	Issue issue = new Issue();
	issue.setIssueType(issueName);
	RoleManager r = ensembles.get(0).getRolebyType(startingRole);
	System.out.println("ISSUE TRIGGERED: " + issue.getIssueType());

	IssueResolution resolution1 = new IssueResolution(1, "ISSUE_TRIGGERED",
		r, r, issue, null);
	resolution1.setRoot(true);
	r.addIssueResolution(resolution1);

	EnsembleManager em = null;

	// add the issueresolution to the right Ensemble
	for (int i = 0; i < ensembles.size(); i++) {
	    for (int j = 0; j < ensembles.get(i).getRolesManagers().size(); j++) {
		RoleManager currentManager = ensembles.get(i)
			.getRolesManagers().get(j);
		if (currentManager.getRole().getType()
			.equalsIgnoreCase(r.getRole().getType())) {
		    ArrayList<IssueResolution> resolutions = new ArrayList<IssueResolution>();

		    em = ensembles.get(i);
		    if (em.getIssueCommunications() != null) {
			em.getIssueCommunications().clear();
		    }

		    solution.setCapID(capID);
		    HashMap<String, List<RoleCommand>> ensembleCommands = new HashMap<String, List<RoleCommand>>();
		    List<RoleCommand> commands = new ArrayList<RoleCommand>();
		    ensembleCommands.put(em.getEnsemble().getName(), commands);

		    solution.setEnsembleCommands(ensembleCommands);

		    // update id of the issue resolution
		    em.setIssueResolutionCount(1);
		    resolution1.setIssueResolutionID(em
			    .getIssueResolutionCount());

		    resolutions.add(resolution1);
		    em.setActiveIssueResolutions(resolutions);

		    List<IssueCommunication> relatedComs = new ArrayList<IssueCommunication>();

		    em.setCommunicationsRelations(resolution1, relatedComs);

		    em.checkIssues(capID, window, ensembles, solution);

		    break;
		}
	    }
	}
	// retrieve the final solution for the ensemble
	List<RoleCommand> roleCommands = new ArrayList<RoleCommand>();
	solution.setCapID(capID);
	for (int i = 0; i < em.getRolesManagers().size(); i++) {
	    RoleManager rm = em.getRolesManagers().get(i);
	    // System.out.println("ROLE: " + rm.getRole().getType());
	    RoleCommand command = rm.getRoleCommands();
	    // System.out.println("COMMAND: " + command.getCommands().get(0));
	    roleCommands.add(command);

	}

	HashMap<String, List<RoleCommand>> ensembleCommands = new HashMap<String, List<RoleCommand>>();
	ensembleCommands.put(em.getEnsemble().getName(), roleCommands);
	solution.setEnsembleCommands(ensembleCommands);
	return solution;

    }

    public static void main(String[] args) throws ConfigurationException,
	    FileNotFoundException {

	try {
	    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	} catch (Exception e) {

	}

	System.gc();
	String propPath = PROP_PATH;
	if (args.length > 0) {
	    propPath = args[0];
	}

	// try {
	// System.out.println("Experiment starting in 5 seconds...");
	// Thread.sleep(5000);
	// } catch (InterruptedException e) {
	// e.printStackTrace();
	// }

	DemonstratorAnalyzer demo = new DemonstratorAnalyzer();

	// List<CollectiveAdaptationEnsemble> ensembles = new
	// ArrayList<CollectiveAdaptationEnsemble>();
	// ensembles.add(new CollectiveAdaptationEnsemble("RouteA",
	// Arrays.asList(
	// "P1", "P2", "P3", "RMA", "DriverA")));
	// ensembles.add(new CollectiveAdaptationEnsemble("RouteB",
	// Arrays.asList(
	// "RMB", "DriverB")));
	// ensembles.add(new CollectiveAdaptationEnsemble("FlexiBusMngmt",
	// Arrays
	// .asList("RMA", "RMB", "FBC")));
	// forse aggiungere il ruolo che triggera l'issue
	// CollectiveAdaptationProblem cap = new CollectiveAdaptationProblem(
	// "CAP_1", ensembles, "IntenseTraffic");

	List<CollectiveAdaptationEnsemble> ensembles = new ArrayList<CollectiveAdaptationEnsemble>();
	ensembles.add(new CollectiveAdaptationEnsemble("RouteA", Arrays.asList(
		"RoutePassenger_1", "RoutePassenger_2", "RoutePassenger_3",
		"FlexibusDriver_1", "RouteManager_1")));
	CollectiveAdaptationProblem cap = new CollectiveAdaptationProblem(
		"CAP_1", ensembles, "IntenseTraffic", "FlexibusDriver_1");

	CollectiveAdaptationSolution cas = demo.executeCap(cap);

	System.out.println("SOLUTION ID: " + cas.getCapID());

	for (HashMap.Entry<String, List<RoleCommand>> entry : cas
		.getEnsembleCommands().entrySet()) {
	    System.out.println(entry.getKey() + " : " + entry.getValue());
	    List<RoleCommand> commands = entry.getValue();

	    for (int i = 0; i < commands.size(); i++) {
		if (commands.get(i) != null) {
		    RoleCommand current = commands.get(i);
		    System.out.println("ROLE: " + current.getRole());
		    System.out.println("COMMAND: "
			    + current.getCommands().get(0));
		}

	    }
	}

	System.out.println("END SIMULATION");
	// System.exit(1);

    }

}
